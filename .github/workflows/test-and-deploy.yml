name: Test and Deploy Healthcare AI Book

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-literature.txt

    - name: Test literature monitoring system
      run: |
        python scripts/test_literature_monitor.py

    - name: Validate Jekyll configuration
      run: |
        gem install bundler jekyll
        bundle install
        bundle exec jekyll build --verbose

    - name: Check chapter files
      run: |
        echo "Checking chapter files..."
        ls -la _chapters/
        echo "Total chapters: $(ls _chapters/*.md | wc -l)"

    - name: Validate front matter
      run: |
        python -c "
        import os
        import re
        
        chapters_dir = '_chapters'
        files = [f for f in os.listdir(chapters_dir) if f.endswith('.md')]
        
        for f in files:
            with open(os.path.join(chapters_dir, f), 'r') as file:
                content = file.read()
                if not content.startswith('---'):
                    print(f'‚ùå Missing front matter: {f}')
                    exit(1)
                else:
                    print(f'‚úÖ Valid front matter: {f}')
        
        print(f'All {len(files)} chapter files have valid front matter')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    - name: Build with Jekyll
      run: |
        bundle exec jekyll build --verbose
      env:
        JEKYLL_ENV: production

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./_site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  literature-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-literature.txt

    - name: Run literature monitoring
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PUBMED_API_KEY: ${{ secrets.PUBMED_API_KEY }}
      run: |
        python scripts/test_literature_monitor.py

    - name: Commit and push updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Literature Monitor Bot"
        
        if [[ -n $(git status --porcelain) ]]; then
          git add .
          git commit -m "üìö Automated literature update: $(date '+%Y-%m-%d')"
          git push origin main
          echo "‚úÖ Successfully updated with latest research"
        else
          echo "‚ÑπÔ∏è No significant literature updates found"
        fi

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false
